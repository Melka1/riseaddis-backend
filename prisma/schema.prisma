datasource db {
  provider = "mongodb"
  url      = env("MONGODB")
}

generator client {
  provider = "prisma-client-js"
  // output   = "./generated/client"
}

model User {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String   @unique
  name    String
  role Role
}

model Unit {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  bathroom Int
  bedroom Int
  balcony Boolean
  images String[]
  netArea Float
  commonArea Float
  totalArea Float
  // payments Payment[]
  available Int

  site Site @relation(fields: [siteId], references: [id])
  siteId String @db.ObjectId

  status Status @default(draft)
}

model Site {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name String
  link String
  description String?
  location String?
  footPrintArea Float?
  builtUpArea Float?
  floors Int?
  basementCount Int?
  parkingLots String?
  oneBedrooms Int?
  twoBedrooms Int?
  threeBedrooms Int?
  numberOfUnits Int?
  images String[] @default([])
  stage String?
  price Int?
  amenities Amenity[]
  deliveryTime String?

  payments Payment[] //@relation(fields: [paymentIds], references: [id])
  // paymentIds String[] @db.ObjectId

  units Unit[]
  
  realEstate RealEstate @relation(fields: [realEstateId], references: [id])
  realEstateId String @db.ObjectId
  
  status Status @default(draft)
}

model RealEstate {
  id   String   @id @default(auto()) @map("_id") @db.ObjectId
  name String
  link String
  images String[]
  background String?
  sisterCompanies String[]
  previousProjects String[]
  activeProjects String[]

  sites Site[]

  status Status @default(draft)
}

model Amenity {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  image ImageGallery @relation(fields: [imageId], references: [id])
  imageId String @db.ObjectId

  site Site @relation(fields: [siteId], references: [id])
  siteId String @db.ObjectId
}

model ImageGallery {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String @default("")
  imageUrl String

  amemity Amenity[]
}

model Payment {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  paymentType PaymentType @relation(fields: [paymentTypeId], references: [id])
  paymentTypeId String @db.ObjectId

  list PaymentList[]

  site Site @relation(fields: [siteId], references: [id])
  siteId String @db.ObjectId
}

model PaymentType {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  payments Payment[]
}

enum Role {
  ADMIN
  USER
}

enum Status {
  draft
  active
  inactive
}

type PaymentList {
  name String
  value String
}
